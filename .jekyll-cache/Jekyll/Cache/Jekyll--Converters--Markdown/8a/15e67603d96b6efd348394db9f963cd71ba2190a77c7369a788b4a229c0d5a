I"ê0<p>Now that I have a few <a href="/2016/04/22/cloning-the-495">OSI 495 prototype boards</a> on-hand, I could finally build a combined static RAM board for the Challenger III using modern static RAM devices. Finally, no more reseating a ton of SEMI4200s every time the Challenger was moved onto or off of the workbench! I decided to start with a 32K design, but design in such a way that it could be expanded to 64K and beyond without too much trouble.</p>

<p>This 32K RAM board design is suitable for anyone who needs to add to the base memory on a smaller Ohio Scientific system. It has been designed such that the board resides from 0 - 32K in address space (<code>0x0000</code> to <code>0x7FFF</code>). Each 4K segment in that range can be independently enabled or disabled ‚Äì this allows one to retain small chunks of original system memory without having to disable it or alter the RAM board to prevent address conflicts. For exmaple, if you‚Äôre expanding a system based around the 500 CPU board, which has already been expanded to 4K RAM for BASIC, you can disable the bottom 4K on this design with a simple DIP switch setting.</p>

<p>On to the design! We‚Äôll look at the five distinct blocks of the RAM board in detail and cover general construction techniques, assuming you‚Äôre also using a OSI 495 protoboard. Clicking any schematic image will take you to the full PDF, or you can <a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf">download it here</a>.</p>

<h2 id="segment-selection">Segment Selection</h2>

<p>The segment select circuit does quite a bit of the work in generating the chip select signal for the static RAM and bus drivers. It‚Äôs based around a 74LS138 1-of-8 decoder IC, a very useful device with one active high and two active low enable inputs. This single device lets us break up the bottom half of address space into 4K segments, only generate a signal when <code>A15</code> is low, and qualify the signal with <code>Œ¶2‚Ä¢VMA</code>.</p>

<p class="center"><a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf"><img src="/images/osi/32k_ram/segment_select.png" alt="Segment select circuit" /></a></p>

<p>We‚Äôll start at the left and work our way right. <code>Œ¶2‚Ä¢VMA</code> (<code>PHI2*VMA</code> in the schematic) is the OSI bus line that signals that the address lines and bus direction lines are stable and a memory access can begin. It serves as the positive enable for the 74LS138. <code>A15</code>, the high address bit in a 64K system, is fed into one of the negative enable lines on the 74LS138 ‚Äì this activates the IC only when <code>A15</code> is low, indicating a memory request in the <code>0x0000</code> to <code>0x7FFF</code> range.</p>

<p>The <code>/MM</code> line is left for possible memory management expansion. If you‚Äôre not using memory management (most OSI systems aren‚Äôt), just tie it to ground for now.</p>

<p><code>A12</code>, <code>A13</code>, and <code>A14</code> are fed into the 74LS138 as address inputs. The value on these three lines will determine which output of the decoder is active. Since the outputs are active low, all outputs will be high unless a segment is selected. The outputs go through an 8-position DIP switch to allow individually selecting whether a segment is enabled or disabled. From the DIP switch, the outputs go into the inputs of a 74LS30 8-input NAND gate. Pull-up resistors are required (some 1K - 10K value, I had 3.3K resistor packs on hand) so that the lines are pulled up if a switch is open.</p>

<p>The 74LS30 8-input NAND gate will output an active high Chip Enable signal ‚Äì since it‚Äôs NAND, the output will be low only if no segment is active. When any segment becomes active, it will go high. This is inverted to give us <code>/CE</code>, an active low Chip Enable required by the static RAM.</p>

<h2 id="rd-and-wr-generator">/RD and /WR Generator</h2>

<p class="center"><a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf"><img src="/images/osi/32k_ram/rw_generator.png" alt="Read and Write generator" /></a></p>

<p>This one‚Äôs super simple ‚Äì the <code>R//W</code> OSI bus line simply signals whether the memory access is going to be a read or write. It‚Äôs high for read, low for write. Our static RAM requires separate active low signals, and we make use of them elsewhere in the decode circuitry. Two inverter elements of a 74LS04 are used for this.</p>

<h2 id="data-direction-generator">Data Direction Generator</h2>

<p>The OSI bus is kind of confusing in that the peripheral boards are responsible for controlling the CPU board‚Äôs data bus buffers‚Äô direction. This is referred to as <code>DD</code> on the bus, and is an open collector line. On most OSI boards, it‚Äôs driven from a regular totem pole TTL output through a diode, which effectively make it open collector.</p>

<p class="center"><a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf"><img src="/images/osi/32k_ram/data_direction.png" alt="Data Direction circuit" /></a></p>

<p><code>DD</code> is high for a write, and low for a read. It should only be generated when the board is active. We can combine <code>/WR</code> and <code>CE</code> from the above circuits into <code>DD</code> with a two-input NAND gate from a 74LS00. We‚Äôll invert it through another section of a 74LS04 inverter for use in controlling the data bus buffers.</p>

<h2 id="data-bus-buffers">Data Bus Buffers</h2>

<p>Ohio Scientific systems have two options for the data bus: active high or active low. Generally, a backplane system can use either, while some of the smaller Challenger machines require choices based on what the CPU board uses. For vintage boards, the usual choice is a pair of 8T26 inverting buffers for active low, or 8T28 non-inverting buffers for active high. My Challenger III uses an active low data bus, so I designed for 8T26 inverting buffers. They can be swapped directly for 8T28s, though with RAM data polarity doesn‚Äôt matter as long as it‚Äôs the same going in as coming out.</p>

<p class="center"><a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf"><img src="/images/osi/32k_ram/bus_buffer.png" alt="Data bus buffers" /></a></p>

<p>The <code>/RE</code> and <code>DE</code> inputs (Receiver Enable and Driver Enable, respectively) are both tied to <code>/DD</code>. This means that the buffers will be moving data from the system bus onto the internal data bus any time the board is not being read from, including when the board isn‚Äôt selected! This doesn‚Äôt matter as the static RAM won‚Äôt accept writes from the internal data bus unless <code>/WE</code> and <code>/CS</code> are both low.</p>

<h2 id="the-static-ram">The Static RAM</h2>

<p>I chose to use a 62256 JEDEC-compatible static RAM for my board. It‚Äôs a 32K x 8 part that‚Äôs common, widely available, cheap, and easy to work with. It‚Äôs available in fast enough speeds that no wait states are required for any of the three processors available on my 510 CPU board. Wiring is straightforward:</p>

<p class="center"><a href="http://filedump.glitchwrks.com/projects/osi_ram/32k_ram.pdf"><img src="/images/osi/32k_ram/sram.png" alt="Static RAM pinout" /></a></p>

<p>The static RAM‚Äôs address lines go directly to the OSI bus. There‚Äôs no buffering as the buffer would present just as much of a load (possibly more) as the SRAM. <code>/CE</code> is accidentally labeled as <code>/CS</code> in the above figure. <code>/RD</code> and <code>/WR</code> come directly from the read and write generator above. Being as the 62256 is JEDEC pinout, it‚Äôs possible to plug in a 27256 EPROM instead of a SRAM. Since individual 4K segments can be enabled or disabled, this can be a quick way to put 4K ROM BASIC into an OSI system that lacks sufficient ROM sockets on the CPU board ‚Äì a 400 board, for instance.</p>

<h2 id="building-the-circuit">Building the Circuit</h2>

<p>If you‚Äôre building this circuit on an OSI 495 prototype board, you can follow my layout for IC locations. The locations are labeled corresponding to the provided schematic, and pin designations should match, too.</p>

<p class="center"><a href="/images/osi/32k_ram/component_placement.jpg"><img src="/images/osi/32k_ram/scaled/component_placement.jpg" alt="Component placement" /></a> <a href="/images/osi/32k_ram/component_closeup.jpg"><img src="/images/osi/32k_ram/scaled/component_closeup.jpg" alt="Component closeup" /></a></p>

<p>I started with the +5 bridge near the edge connector ‚Äì it‚Äôs a single-sided board, so the only way to cross the ground trace is with a jumper. I found it helpful to label the +5 and GND rails on the copper side of the board. Be sure to add small bypass capacitors at the top of the board and one or two larger electrolytic or tantalum capacitors near the bus connector ‚Äì I used 0.1 uF ceramic capacitors at the top and 22 uF @ 10 V axial tantalums near the bus connector.</p>

<p>As you install each socket, be sure to connect the Vcc and GND pins to +5 and GND, respectively, on the prototype board. I typically use a cut off component lead soldered to the pad and trace, and clipped to length. If you bend the component lead into an ‚ÄúL‚Äù shape, you can hold the upper part of the ‚ÄúL‚Äù with pliers while soldering the lower part down. Clip off excess lead length with close diagonal cutters.</p>

<p>Next, I installed the sockets for the bus buffers, U1 and U2, and wired them to the bus. All of the underside wiring was done with 30 gauge Kynar wire wrapping wire. After the bus drivers were wired to the OSI bus, I added sockets for U3, U4, U5 and U6, as well as the DIP switch and resistor pack. U3 was placed so that most of the lines were a straight across connection to SW1. To keep the back of the board open for bus wiring, I made the connections from U3 to SW1 on the top, using 24 gauge wire from 25-pair telecom cable (solid conductor Ethernet cable works well, too). The resistor pack above SW1 can be mounted directly above SW1, since the 495 board uses triple hole pads. SW1 was then connected to U4 with more Kynar wire.</p>

<p>From here, I laid down all of the control signal wiring. This started with four address lines from the OSI bus to U3, along with <code>Œ¶2‚Ä¢VMA</code>. Don‚Äôt forget to tie <code>/MM</code> to ground if you‚Äôre not going to build memory management circuitry! Connect up <code>R//W</code> to U5, and jumper U5 pin 2 to U5 pin 3 to form the <code>/RD</code> and <code>/WR</code> generator. Make the connection from U4‚Äôs output to U5 as well, and the Data Direction generator can be built. I added the 1N4148 diode horizontally from U6 pin 3 to the free pad to the left of U6 pin 1, and ran a long wire to <code>DD</code> on the OSI bus.</p>

<p>Now comes the long, tedious bit of wiring. Solder down the socket for U7, the static RAM. I brought the <code>/DD</code> control line from the Data Direction generator to the bus buffers, then the control lines to the static RAM, then the internal data bus from the drivers to the static RAM. Address lines to the static RAM got laid in last ‚Äì since there‚Äôs 14 of them, they take up more space and would probably have been harder to work around.</p>

<p>Here‚Äôs a full view of the back of the finished prototype:</p>

<p class="center"><a href="/images/osi/32k_ram/wiring.jpg"><img src="/images/osi/32k_ram/scaled/wiring.jpg" alt="32K RAM wiring" /></a></p>

<p>Colors are as follows:</p>

<ul>
  <li>Blue is address, unbuffered directly from the OSI bus</li>
  <li>Yellow is internal data bus</li>
  <li>Green is control signalling</li>
  <li>Red was used for both the OSI data bus and between SW1 and U4</li>
</ul>

<p>Check everything over with a multimeter or continuity tester, install all ICs, enable the 4K segments you want to use (SW1 on == segment enabled), and install the board in your Ohio Scientific. Power on and find out if you‚Äôve got any wiring errors! Please <a href="https://services.glitchworks.net/ng/messages/new">let me know</a> if you build one of these boards, if you have problems, or if you‚Äôd like to buy a 495 board for it. Next, we‚Äôll expand the board to 64K and discuss memory management! For now, enjoy 32K of problem-free static RAM for your Ohio Scientific!</p>

<p class="center">
    <script language="javascript" src="https://services.glitchworks.net/counters/32k_ram"></script> memory errors avoided
</p>

:ET