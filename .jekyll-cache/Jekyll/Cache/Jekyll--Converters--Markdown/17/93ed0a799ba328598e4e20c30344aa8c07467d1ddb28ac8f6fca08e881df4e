I"ˆ<div>&nbsp;</div>
<div class="error_explanation">
  <div class="error_explanation_content">
    
<p>Stripping out part of Railsâ€™ security features is often a <a href="http://www.catb.org/jargon/html/B/Bad-Thing.html">Bad Thing</a> and shouldnâ€™t be done unless youâ€™re really sure you donâ€™t need them. <em>Railsâ€™ default configuration is sane and promotes security for most uses.</em> Donâ€™t follow the advice in this article blindly!</p>

  </div>
</div>

<p>This siteâ€™s dynamic functions started out as being provided by a small <a href="http://www.sinatrarb.com/">Sinatra</a> application. You can view that project <a href="https://github.com/chapmajs/site_services.git">on GitHub</a>. It started out with counters, then got a <code>POST</code> endpoint for a contact form bolted on, and eventually ended up supporting part of my preorder system. I had included <a href="https://rubygems.org/gems/activerecord">ActiveRecord</a> from the start, but as the application started needing email templates, better user-facing error reporting, et c. it became clear that I should just tranisition to <a href="http://rubyonrails.org/">Ruby on Rails</a> rather than slowly bringing in all of the bits of Rails, one at a time.</p>

<p>In converting to Rails, I sought to disable cookies from all parts of the application where they werenâ€™t required â€“ there was nothing that needed cookies, so why bother sending one? By default, that means losing session support with Rails. Many applications pass around a <code>SESSION_ID</code> parameter from page to page, but this isnâ€™t something that Rails supports without custom or third-party code. No big deal, we donâ€™t need a session since everything is stateless in this application.</p>

<h2 id="turning-off-cookies-and-sessions">Turning Off Cookies and Sessions</h2>

<p>In <code>config/application.rb</code>, we remove the middleware responsible for both cookies and the cookie-based session store:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Disable cookies, we don't use them here</span>
<span class="n">config</span><span class="p">.</span><span class="nf">middleware</span><span class="p">.</span><span class="nf">delete</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Cookies</span>
<span class="n">config</span><span class="p">.</span><span class="nf">middleware</span><span class="p">.</span><span class="nf">delete</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">CookieStore</span></code></pre></figure>

<p>Since that effectively breaks sessions, weâ€™ll turn those off, too. Weâ€™re doing this in <code>config/initializers/session_store.rb</code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Not using sessions here</span>
<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config</span><span class="p">.</span><span class="nf">session_store</span> <span class="ss">:disabled</span></code></pre></figure>

<p>If you still want to use flash messages, youâ€™ll need to manually include them in <code>config/application.rb</code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Enable flash messages, these will be on the request since we're not using sessions</span>
<span class="n">config</span><span class="p">.</span><span class="nf">middleware</span><span class="p">.</span><span class="nf">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Flash</span></code></pre></figure>

<p>Flash messages still work, they will just come from the request rather than the session.</p>

<h2 id="disabling-csrf-protection">Disabling CSRF Protection</h2>

<p>With sessions disabled, <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a> protection is effectively also broken. Running your Rails app as configured will produce warnings in the log concerning unverifiable CSRF tokens. Again, unless youâ€™re going to use custom or third-party code, CSRF will be effectively broken and should also be turned off. Thereâ€™s a few steps to this. First, go ahead and remove <code>protect_from_forgery</code> from your base controller class (whatever class extends <code>ApplicationController::Base</code>, often <code>app/controllers/application_controller.rb</code>). This will stop Rails from warning you about unverifiable CSRF tokens.</p>

<p>To reduce noise, you can also remove the <code>csrf_meta_tags</code> include from your base <code>ApplicationLayout</code> (often <code>app/views/layouts/application.html.erb</code>). This will prevent meta tags containing the CSRF token from being inserted in responses. We can also tell Rails to stop inserting hidden CSRF token fields into forms â€“ these will show up as a hidden field called <code>authenticity_token</code> by default. Leaving them in, like <code>csrf_meta_tags</code>, doesnâ€™t hurt anything, but itâ€™s another parameter that will come in with every form. Disable it by adding the following to your application config:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># No session, so don't bother with CSRF tokens</span>
<span class="n">config</span><span class="p">.</span><span class="nf">action_controller</span><span class="p">.</span><span class="nf">allow_forgery_protection</span> <span class="o">=</span> <span class="kp">false</span></code></pre></figure>

<p>This application-wide setting will stop <code>form_tag</code>, <code>form_for</code>, and things that extend Railsâ€™ form support, like the <a href="https://github.com/plataformatec/simple_form">simple_form gem</a>, from inserting <code>authenticity_token</code> fields into your forms.</p>

<h2 id="secret_key_base-still-required">secret_key_base Still Required</h2>

<p>After removing cookies and sessions from my Rails application, I incorrectly assumed that I could omit the <code>secret_key_base</code> from <code>config/secrets.yml</code>. Configuration guides state that the key is used to cryptographically sign cookies which contain a session ID, as well as for encrypting the entire session when an application is using Railsâ€™ <a href="http://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html">cookie-based session store</a>. Omitting the key from the secrets file results in a number of warnings and errors. I tried monkey-patching around them, only to find more errors. A <a href="https://github.com/rails/rails/search?utf8=%E2%9C%93&amp;q=key_generator">search through the GitHub repo</a> turns up several uses of <code>key_generator</code> that have no relation to cookies or sessions, so it seems the <code>secret_base_key</code> (or <code>secret_token</code> if you like deprecation warnings) is always required for various internal bits of Rails.</p>

<h2 id="security-implications">Security Implications</h2>

<p>As the warning at the top of the page notes, this isnâ€™t something that most people should be doing to their Rails applications. In this specific case, the application has no concept of users or sessions. Everything is a stateless action coming from an unidentified, unauthenticated end user. The few benefits against scripted DoS attacks afforded by a CSRF token are easily nullified by the attacker doing a <code>GET</code> to the endpoing that supplies the form (and authenticity token!) before doing their malicious <code>POST</code>.</p>

<p>Removing cookie and session support reduces the available attack surface of the application â€“ there is no persistent data between requests, except whatâ€™s in the database and the temporary storage of the requestâ€™s flash message(s).</p>

<p class="center">
    <script language="javascript" src="https://services.glitchworks.net/counters/rails_cookies"></script> sessions hijacked
</p>

:ET