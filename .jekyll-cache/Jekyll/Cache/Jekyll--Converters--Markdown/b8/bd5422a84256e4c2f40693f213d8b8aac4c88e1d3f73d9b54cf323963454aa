I"y)<p>Some time in 2012, <a href="http://www.retrohacker.com/">Sark</a> bought a number of scrap circuit boards, which included several 8080 processor boards that he first assumed might be S-100. After receiving them, it was obvious they weren’t S-100 as they had a smaller edge connector and no local regulation. He brought them over for me to check out: I immediately recognized them as Identicon hardware, as I had a quantity of barcode scanners produced by Identicon which used a very similar form-factor CPU board, but were <a href="https://en.wikipedia.org/wiki/Motorola_6800">Motorola 6802</a> based. In late March 2012, we decided to get together and hack on them.</p>

<h3 id="initial-testing">Initial Testing</h3>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/first_tests.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/first_tests.jpg" alt="Initial testing of the Identicon 8080 CPU board" /></a>
</div>

<p>Initial testing was done on the bench with my Lambda LPT-7202-FM triple-voltage power supply. The Intel 8080 is a triple-voltage CPU, and we traced back from its power pins to figure out where to supply +12V and -12V – the Identicon board turned out to have local -5V regulation using a 79M05 regulator in TO-5 packaging. Once power was identified, the board was brought up with the current limiters turned down, to check for shorts.</p>

<p>Having found no shorts, we decided to get the board running programs via test ROMs. The Identicon CPU board has two sockets for 2708-type EPROMs: one directly below the Intel 8228 system controller, and another below that, but using a larger 36-pin socket. When using an EPROM in the 36-pin socket, it is justified toward the front. Initial tests were my usual test ROMs:</p>

<ul>
  <li><code>HALT</code> ROM, filled with <code>0x76</code>, which immediately HALTs the CPU on reset</li>
  <li><code>JMP 0</code> ROM, which contains <code>C3 00 00</code> at the beginning, the remainder being filled with <code>HLT</code> instructions. This ROM will sit in a loop, jumping back to <code>0x0000</code> forever, if things are operating properly</li>
  <li><code>HELO</code> ROM, which outputs the string “HELO” to a character display</li>
</ul>

<p>The last test ROM required hacking a display into the Identicon board. We decided to add a HP HDSP-2416 ASCII character display on a breadboard with flywires, using the 36-pin socket and a grab lead for I/O write:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/2416_helo.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/2416_helo.jpg" alt="HDSP-2416 displaying HELO" /></a>
</div>

<p>After this test was completed, we were pretty sure we had some boards that were worth hacking on! The next step was to figure out the onboard memory and I/O decoding. This would require more handling of the board and would require at least a more robust display hack. The project got shelved for two or three weeks.</p>

<h3 id="better-power-supply-setup">Better Power Supply Setup</h3>

<p>In mid-April 2012, Sark and I got back together to hack on these Identicon CPU boards. Sark had traced out enough of the edge connector that we were confident the 8080 CPU board could be run in the barcode scanners I had, which had originally used Motorola 6802 CPU boards. This would allow plugging and unplugging the board without a bunch of jumpers to the Lambda power supply. He decided to trade me a CPU board for a chassis, since I had several 6802-based units. Here’s my board installed in one of the barcode scanner card cages:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/testing_in_chassis.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/testing_in_chassis.jpg" alt="Testing the Identicon 8080 CPU board in a barcode scanner chassis" /></a>
</div>

<p>The card cage includes a modular Power One linear power supply (slightly visible in the bottom of the above picture), power switch, and reset button. There are a few connectors on the back for the barcode wand, and a connection to whatever these originally talked to. The top of the unit contains a keypad, and a display made up of DL-1416 alphanumeric displays. Having the chassis made hacking much nicer.</p>

<p>The 8080 CPU board Sark traded me required a few repairs: the Intel 8224 clock generator was gone, two 74LS253 multiplexers had been crushed, and a 1K resistor near the edge connector was broken. We also ended up replacing an Intel 2111 256 x 4 static RAM, but my notes don’t show whether this was due to the chip having been destroyed, or if we’d determined it was defective. These boards had been acquired as scrap, so either situation is possible.</p>

<h3 id="better-debug-display">Better Debug Display</h3>

<p>With the board repaired, we decided to make a more convenient display adapter, seen plugged into the 36-pin socket above. Here’s a closer look:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/pdsp1881_closeup.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/pdsp1881_closeup.jpg" alt="PDSP1881 display adapter in Identicon CPU board" /></a>
</div>

<p>I had several Siemens PDSP-1881 character displays on hand, and we decided to use these. They are eight character dot matrix displays, fully ASCII decoded, and have 300 mil pin spacing. The pin spacing means that an adapter board could be made to plug them into the Identicon CPU board’s 36-pin socket with relative ease. A chunk of pad-per-hole prototyping board was used, along with male:male machine pin header strips. Connections between the header pins and the DIP socket for the PDSP-1881 were made using 30 AWG Kynar wire. As seen above, a flywire for the I/O write signal is still required.</p>

<p>The yellow PDSP-1881s are very easy to read, but do not photograph well, so we added a chunk of red filter:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/pdsp1881_closeup_filtered.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/pdsp1881_closeup_filtered.jpg" alt="PDSP1881 display with red filter" /></a>
</div>

<h3 id="figuring-out-the-memory-map">Figuring Out the Memory Map</h3>

<p>With hardware hacks out of the way, we could start working on figuring out the memory map of the board. I wrote a small test routine which attempted to locate the top of ROM space by writing <code>0x55</code> to memory and seeing if the value stuck. If it did, <code>0xAA</code> was then written to the same location, to ensure we hadn’t encountered <code>0x55</code> in ROM or some floating bus garbage. Once a writable location was found, the address of that location was converted to ASCII and displayed on the PDSP-1881:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/rom_top.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/rom_top.jpg" alt="ROM top address on PDSP-1881" /></a>
  <a href="/images/vintage-misc/identicon_8080/rom_top_filtered.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/rom_top_filtered.jpg" alt="ROM top address, filtered" /></a>
</div>

<p>The display shows <code>0x0800</code>, which is sensible for a system using two 2708 EPROMs, which are 1K x 8 devices. This means the ROMs are located in the bottom of memory, with the ROM socket closest to the CPU occupying <code>0x0000</code> to <code>0x03FF</code>, and the 36-pin socket occupying <code>0x0400</code> to <code>0x07FF</code>.</p>

<p>The Identicon 8080 CPU board does have a small amount of RAM onboard: 512 bytes, in four Intel 2111 type static RAMs. These RAMs are 256 x 4 devices, requiring two to store a byte. We knew now that the first writable RAM address was <code>0x0800</code>, but the top of RAM needed to be found. Another program was written that performed essentially the same test as the top-of-ROM program, but working from the other direction:</p>

<div class="center">
  <a href="/images/vintage-misc/identicon_8080/ram_top.jpg"><img src="/images/vintage-misc/identicon_8080/scaled/ram_top.jpg" alt="RAM top address on PDSP-1881" /></a>
</div>

<p>This program displayed <code>0xF9FF</code> on the PDSP-1881. That value means that RAM and ROM decoding allows the memory devices to repeat through the full 64K address space. From these results, it was likely that the decoding repeated every 4K.</p>

<p>Note that the above image shows the PDSP-1881 adapter in use with Sark’s CPU board (his has red sockets and a white ceramic 8228). This was likely due to our not having a replacement Intel 2111 for my board at the time, I believe it was desoldered from another one of the scrap boards over the course of our hacking!</p>

<h3 id="conclusion">Conclusion</h3>

<p>Hacking on these boards proved to be a fair bit of fun! Identicon came up with a clean design which was easy to reverse engineer. We had not completely reverse engineered the board, but had gotten far enough to run programs that required RAM, and had a less-hacky debug display which could be removed and reinstalled without too much fuss.</p>

<p>In addition to the CPU, control circuitry, and memory devices, the Identicon 8080 boards also seem to contain an interface for a barcode wand. It’s similar to the wand interface found in my Motorola 6802 based scanners, but likely includes some basic I/O. This hardware had not been examined in 2012.</p>

<p>The scrap lot that contained these CPU boards also contained a single serial board, which was based on a TR1402 style 40-pin UART. The Motorola 6802 boards likely bit-bang their serial connection, as they have two <a href="https://en.wikipedia.org/wiki/MOS_Technology_6522">6522 VIAs</a> onboard, which provide hardware that makes bit-banging easier. Sark kept the UART board, since there is only one.</p>

<p>I was unaware at the time, but the Identicon 8080 CPU board is pretty much a reference implementation for the MCS-80 family. I wouldn’t be surprised if the prototype had been built on an <a href="/sdk80">Intel MCS-80 System Design Kit</a>, especially considering the use of Intel 2111 type SRAMs and the 86-pin edge connector. I showed my Identicon 8080 CPU board, along with my Intel SDK-80, at <a href="http://vcfmw.org/">VCF Midwest 2019</a>.</p>

<p>I still have not found out which Identicon product actually used this 8080 processor board. If anyone knows, please <a href="https://services.glitchworks.net/ng/messages/new">contact us</a>.</p>

<p class="center">
    <script language="javascript" src="https://services.glitchworks.net/counters/identicon_8080"></script> barcode scanners running CP/M
</p>

:ET